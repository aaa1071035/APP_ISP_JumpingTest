; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\isp\obj\stm32f2xx_hal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\isp\obj\stm32f2xx_hal.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\stm32f2xx_hal\Inc -I.\ISP\Src -I.\RTE\_ISP -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F2xx_DFP\2.10.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F207xx --omf_browse=.\isp\obj\stm32f2xx_hal.crf stm32f2xx_hal\Src\stm32f2xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;470      */
;;;471    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4803              LDR      r0,|L1.16|
;;;472    {
;;;473      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6048              STR      r0,[r1,#4]
;;;474    }
00000c  4770              BX       lr
;;;475    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;506      */
;;;507    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4803              LDR      r0,|L2.16|
;;;508    {
;;;509      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0200004          BIC      r0,r0,#4
000008  4901              LDR      r1,|L2.16|
00000a  6048              STR      r0,[r1,#4]
;;;510    }
00000c  4770              BX       lr
;;;511    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;488      */
;;;489    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4803              LDR      r0,|L3.16|
;;;490    {
;;;491      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L3.16|
00000a  6048              STR      r0,[r1,#4]
;;;492    }
00000c  4770              BX       lr
;;;493    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;461      */
;;;462    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4803              LDR      r0,|L4.16|
;;;463    {
;;;464      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  6048              STR      r0,[r1,#4]
;;;465    }
00000c  4770              BX       lr
;;;466    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;497      */
;;;498    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4803              LDR      r0,|L5.16|
;;;499    {
;;;500      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L5.16|
00000a  6048              STR      r0,[r1,#4]
;;;501    }
00000c  4770              BX       lr
;;;502    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;479      */
;;;480    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4803              LDR      r0,|L6.16|
;;;481    {
;;;482      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;483    }
00000c  4770              BX       lr
;;;484    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;183      */
;;;184    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;185    {
;;;186      /* Reset of all peripherals */
;;;187      __HAL_RCC_APB1_FORCE_RESET();
000002  f04f30ff          MOV      r0,#0xffffffff
000006  490e              LDR      r1,|L7.64|
000008  6008              STR      r0,[r1,#0]
;;;188      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;189    
;;;190      __HAL_RCC_APB2_FORCE_RESET();
00000e  1e40              SUBS     r0,r0,#1
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;191      __HAL_RCC_APB2_RELEASE_RESET();
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;192    
;;;193      __HAL_RCC_AHB1_FORCE_RESET();
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L7.64|
00001c  3910              SUBS     r1,r1,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;194      __HAL_RCC_AHB1_RELEASE_RESET();
000020  2000              MOVS     r0,#0
000022  6008              STR      r0,[r1,#0]
;;;195    
;;;196      __HAL_RCC_AHB2_FORCE_RESET();
000024  1e40              SUBS     r0,r0,#1
000026  1d09              ADDS     r1,r1,#4
000028  6008              STR      r0,[r1,#0]
;;;197      __HAL_RCC_AHB2_RELEASE_RESET();
00002a  2000              MOVS     r0,#0
00002c  6008              STR      r0,[r1,#0]
;;;198    
;;;199      __HAL_RCC_AHB3_FORCE_RESET();
00002e  1e40              SUBS     r0,r0,#1
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;200      __HAL_RCC_AHB3_RELEASE_RESET();
000034  2000              MOVS     r0,#0
000036  6008              STR      r0,[r1,#0]
;;;201    
;;;202      /* De-Init the low level hardware */
;;;203      HAL_MspDeInit();
000038  f7fffffe          BL       HAL_MspDeInit
;;;204        
;;;205      /* Return function status */
;;;206      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;207    }
00003e  bd10              POP      {r4,pc}
;;;208    
                          ENDP

                  |L7.64|
                          DCD      0x40023820

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;382      */
;;;383    __weak void HAL_Delay(__IO uint32_t Delay)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;384    {
;;;385      uint32_t tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4605              MOV      r5,r0
;;;386      uint32_t wait = Delay;
000008  9c00              LDR      r4,[sp,#0]
;;;387    
;;;388      /* Add a freq to guarantee minimum wait */
;;;389      if (wait < HAL_MAX_DELAY)
00000a  1c60              ADDS     r0,r4,#1
00000c  b110              CBZ      r0,|L8.20|
;;;390      {
;;;391        wait += (uint32_t)(uwTickFreq);
00000e  4805              LDR      r0,|L8.36|
000010  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000012  4404              ADD      r4,r4,r0
                  |L8.20|
;;;392      }
;;;393    
;;;394      while ((HAL_GetTick() - tickstart) < wait)
000014  bf00              NOP      
                  |L8.22|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b40              SUBS     r0,r0,r5
00001c  42a0              CMP      r0,r4
00001e  d3fa              BCC      |L8.22|
;;;395      {
;;;396      }
;;;397    }
000020  bd38              POP      {r3-r5,pc}
;;;398    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      uwTickFreq

                          AREA ||i.HAL_DisableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_DisableCompensationCell PROC
;;;528      */
;;;529    void HAL_DisableCompensationCell(void)
000000  2000              MOVS     r0,#0
;;;530    {
;;;531      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
000002  2101              MOVS     r1,#1
000004  fa91f1a1          RBIT     r1,r1
000008  fab1f181          CLZ      r1,r1
00000c  4a02              LDR      r2,|L9.24|
00000e  eb020181          ADD      r1,r2,r1,LSL #2
000012  f8c10400          STR      r0,[r1,#0x400]
;;;532    }
000016  4770              BX       lr
;;;533    
                          ENDP

                  |L9.24|
                          DCD      0x42270000

                          AREA ||i.HAL_EnableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_EnableCompensationCell PROC
;;;517      */
;;;518    void HAL_EnableCompensationCell(void)
000000  2001              MOVS     r0,#1
;;;519    {
;;;520      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
000002  fa90f1a0          RBIT     r1,r0
000006  fab1f181          CLZ      r1,r1
00000a  4a03              LDR      r2,|L10.24|
00000c  eb020181          ADD      r1,r2,r1,LSL #2
000010  f8c10400          STR      r0,[r1,#0x400]
;;;521    }
000014  4770              BX       lr
;;;522    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x42270000

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;452      */
;;;453    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L11.12|
;;;454    {
;;;455       return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;456    }
000008  4770              BX       lr
;;;457    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;434      */
;;;435    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L12.4|
;;;436    {
;;;437     return __STM32F2xx_HAL_VERSION;
;;;438    }
000002  4770              BX       lr
;;;439    
                          ENDP

                  |L12.4|
                          DCD      0x01020600

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;443      */
;;;444    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L13.8|
;;;445    {
;;;446       return((DBGMCU->IDCODE) >> 16U);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;447    }
000006  4770              BX       lr
;;;448    
                          ENDP

                  |L13.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;316      */
;;;317    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L14.8|
;;;318    {
;;;319      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;320    }
000004  4770              BX       lr
;;;321    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      uwTick

                          AREA ||i.HAL_GetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_GetTickFreq PROC
;;;366      */
;;;367    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
000000  4801              LDR      r0,|L15.8|
;;;368    {
;;;369      return uwTickFreq;
000002  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
;;;370    }
000004  4770              BX       lr
;;;371    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      uwTickFreq

                          AREA ||i.HAL_GetTickPrio||, CODE, READONLY, ALIGN=2

                  HAL_GetTickPrio PROC
;;;325      */
;;;326    uint32_t HAL_GetTickPrio(void)
000000  4801              LDR      r0,|L16.8|
;;;327    {
;;;328      return uwTickPrio;
000002  6800              LDR      r0,[r0,#0]  ; uwTickPrio
;;;329    }
000004  4770              BX       lr
;;;330    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      uwTickPrio

                          AREA ||i.HAL_GetUIDw0||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw0 PROC
;;;537      */
;;;538    uint32_t HAL_GetUIDw0(void)
000000  4801              LDR      r0,|L17.8|
;;;539    {
;;;540      return (READ_REG(*((uint32_t *)UID_BASE)));
000002  6800              LDR      r0,[r0,#0]
;;;541    }
000004  4770              BX       lr
;;;542    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x1fff7a10

                          AREA ||i.HAL_GetUIDw1||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw1 PROC
;;;546      */
;;;547    uint32_t HAL_GetUIDw1(void)
000000  4801              LDR      r0,|L18.8|
;;;548    {
;;;549      return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000002  6800              LDR      r0,[r0,#0]
;;;550    }
000004  4770              BX       lr
;;;551    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x1fff7a14

                          AREA ||i.HAL_GetUIDw2||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw2 PROC
;;;555      */
;;;556    uint32_t HAL_GetUIDw2(void)
000000  4801              LDR      r0,|L19.8|
;;;557    {
;;;558      return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
000002  6800              LDR      r0,[r0,#0]
;;;559    }
000004  4770              BX       lr
;;;560    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x1fff7a18

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;305      */
;;;306    __weak void HAL_IncTick(void)
000000  4803              LDR      r0,|L20.16|
;;;307    {
;;;308      uwTick += uwTickFreq;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  4903              LDR      r1,|L20.20|
000006  7809              LDRB     r1,[r1,#0]  ; uwTickFreq
000008  4408              ADD      r0,r0,r1
00000a  4901              LDR      r1,|L20.16|
00000c  6008              STR      r0,[r1,#0]  ; uwTick
;;;309    }
00000e  4770              BX       lr
;;;310    
                          ENDP

                  |L20.16|
                          DCD      uwTick
                  |L20.20|
                          DCD      uwTickFreq

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;150      */
;;;151    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153      /* Configure Flash prefetch, Instruction cache, Data cache */ 
;;;154    #if (INSTRUCTION_CACHE_ENABLE != 0U)
;;;155       __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
000002  480d              LDR      r0,|L21.56|
000004  6800              LDR      r0,[r0,#0]
000006  f4407000          ORR      r0,r0,#0x200
00000a  490b              LDR      r1,|L21.56|
00000c  6008              STR      r0,[r1,#0]
;;;156    #endif /* INSTRUCTION_CACHE_ENABLE */
;;;157    
;;;158    #if (DATA_CACHE_ENABLE != 0U)
;;;159       __HAL_FLASH_DATA_CACHE_ENABLE();
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f4406080          ORR      r0,r0,#0x400
000016  6008              STR      r0,[r1,#0]
;;;160    #endif /* DATA_CACHE_ENABLE */
;;;161    
;;;162    #if (PREFETCH_ENABLE != 0U)
;;;163      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f4407080          ORR      r0,r0,#0x100
000020  6008              STR      r0,[r1,#0]
;;;164    #endif /* PREFETCH_ENABLE */
;;;165    
;;;166      /* Set Interrupt Group Priority */
;;;167      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;168    
;;;169      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;170      HAL_InitTick(TICK_INT_PRIORITY);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       HAL_InitTick
;;;171      
;;;172      /* Init the low level hardware */
;;;173      HAL_MspInit();
00002e  f7fffffe          BL       HAL_MspInit
;;;174      
;;;175      /* Return function status */
;;;176      return HAL_OK;
000032  2000              MOVS     r0,#0
;;;177    }
000034  bd10              POP      {r4,pc}
;;;178    
                          ENDP

000036  0000              DCW      0x0000
                  |L21.56|
                          DCD      0x40023c00

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;246      */
;;;247    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;248    {
000002  4604              MOV      r4,r0
;;;249      /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;250      if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
000004  480e              LDR      r0,|L22.64|
000006  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb1f0f0          UDIV     r0,r1,r0
000010  490c              LDR      r1,|L22.68|
000012  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000014  fbb1f5f0          UDIV     r5,r1,r0
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_SYSTICK_Config
00001e  b108              CBZ      r0,|L22.36|
;;;251      {
;;;252        return HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L22.34|
;;;253      }
;;;254    
;;;255      /* Configure the SysTick IRQ priority */
;;;256      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
;;;257      {
;;;258        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
;;;259        uwTickPrio = TickPriority;
;;;260      }
;;;261      else
;;;262      {
;;;263        return HAL_ERROR;
;;;264      }
;;;265    
;;;266      /* Return function status */
;;;267      return HAL_OK;
;;;268    }
000022  bd70              POP      {r4-r6,pc}
                  |L22.36|
000024  2c10              CMP      r4,#0x10              ;256
000026  d207              BCS      |L22.56|
000028  2200              MOVS     r2,#0                 ;258
00002a  4621              MOV      r1,r4                 ;258
00002c  1e50              SUBS     r0,r2,#1              ;258
00002e  f7fffffe          BL       HAL_NVIC_SetPriority
000032  4805              LDR      r0,|L22.72|
000034  6004              STR      r4,[r0,#0]            ;259  ; uwTickPrio
000036  e001              B        |L22.60|
                  |L22.56|
000038  2001              MOVS     r0,#1                 ;263
00003a  e7f2              B        |L22.34|
                  |L22.60|
00003c  2000              MOVS     r0,#0                 ;267
00003e  e7f0              B        |L22.34|
;;;269    
                          ENDP

                  |L22.64|
                          DCD      uwTickFreq
                  |L22.68|
                          DCD      SystemCoreClock
                  |L22.72|
                          DCD      uwTickPrio

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;223      */
;;;224    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;225    {
;;;226      /* NOTE : This function Should not be modified, when the callback is needed,
;;;227                the HAL_MspDeInit could be implemented in the user file
;;;228       */ 
;;;229    }
;;;230    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;212      */
;;;213    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;214    {
;;;215      /* NOTE : This function Should not be modified, when the callback is needed,
;;;216                the HAL_MspInit could be implemented in the user file
;;;217       */
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;424      */
;;;425    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;426    {
;;;427      /* Enable SysTick Interrupt */
;;;428      SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;429    }
000010  4770              BX       lr
;;;430    
                          ENDP


                          AREA ||i.HAL_SetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_SetTickFreq PROC
;;;334      */
;;;335    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
000000  b570              PUSH     {r4-r6,lr}
;;;336    {
000002  4604              MOV      r4,r0
;;;337      HAL_StatusTypeDef status  = HAL_OK;
000004  2500              MOVS     r5,#0
;;;338      HAL_TickFreqTypeDef prevTickFreq;
;;;339    
;;;340      assert_param(IS_TICKFREQ(Freq));
;;;341    
;;;342      if (uwTickFreq != Freq)
000006  4808              LDR      r0,|L26.40|
000008  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
00000a  42a0              CMP      r0,r4
00000c  d00a              BEQ      |L26.36|
;;;343      {
;;;344        /* Back up uwTickFreq frequency */
;;;345        prevTickFreq = uwTickFreq;
00000e  4806              LDR      r0,|L26.40|
000010  7806              LDRB     r6,[r0,#0]  ; uwTickFreq
;;;346    
;;;347        /* Update uwTickFreq global variable used by HAL_InitTick() */
;;;348        uwTickFreq = Freq;
000012  7004              STRB     r4,[r0,#0]
;;;349    
;;;350        /* Apply the new tick Freq  */
;;;351        status = HAL_InitTick(uwTickPrio);
000014  4805              LDR      r0,|L26.44|
000016  6800              LDR      r0,[r0,#0]  ; uwTickPrio
000018  f7fffffe          BL       HAL_InitTick
00001c  4605              MOV      r5,r0
;;;352    
;;;353        if (status != HAL_OK)
00001e  b10d              CBZ      r5,|L26.36|
;;;354        {
;;;355          /* Restore previous tick frequency */
;;;356          uwTickFreq = prevTickFreq;
000020  4801              LDR      r0,|L26.40|
000022  7006              STRB     r6,[r0,#0]
                  |L26.36|
;;;357        }
;;;358      }
;;;359    
;;;360      return status;
000024  4628              MOV      r0,r5
;;;361    }
000026  bd70              POP      {r4-r6,pc}
;;;362    
                          ENDP

                  |L26.40|
                          DCD      uwTickFreq
                  |L26.44|
                          DCD      uwTickPrio

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;408      */
;;;409    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;410    {
;;;411      /* Disable SysTick Interrupt */
;;;412      SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0200002          BIC      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;413    }
000010  4770              BX       lr
;;;414    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000
                  uwTickPrio
                          DCD      0x00000010
                  uwTickFreq
000008  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "stm32f2xx_hal\\Src\\stm32f2xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_hal_c_3da258af____REV16|
#line 467 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_stm32f2xx_hal_c_3da258af____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_hal_c_3da258af____REVSH|
#line 482
|__asm___15_stm32f2xx_hal_c_3da258af____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_hal_c_3da258af____RRX|
#line 669
|__asm___15_stm32f2xx_hal_c_3da258af____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
