; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\isp\obj\stm32f2xx_hal_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\isp\obj\stm32f2xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\stm32f2xx_hal\Inc -I.\ISP\Src -I.\RTE\_ISP -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F2xx_DFP\2.10.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F207xx --omf_browse=.\isp\obj\stm32f2xx_hal_rcc.crf stm32f2xx_hal\Src\stm32f2xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1201     */
;;;1202   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1203   {
;;;1204     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1205               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1206      */
;;;1207   }
;;;1208   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;708      */
;;;709    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;710    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;711      uint32_t tickstart;
;;;712    
;;;713      /* Check Null pointer */
;;;714      if(RCC_ClkInitStruct == NULL)
000006  b90c              CBNZ     r4,|L2.12|
;;;715      {
;;;716        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;717      }
;;;718    
;;;719      /* Check the parameters */
;;;720      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;721      assert_param(IS_FLASH_LATENCY(FLatency));
;;;722    
;;;723      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;724         must be correctly programmed according to the frequency of the CPU clock
;;;725         (HCLK) and the supply voltage of the device. */
;;;726    
;;;727      /* Increasing the number of wait states because of higher CPU frequency */
;;;728      if(FLatency > __HAL_FLASH_GET_LATENCY())
;;;729      {
;;;730        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;731        __HAL_FLASH_SET_LATENCY(FLatency);
;;;732    
;;;733        /* Check that the new number of wait states is taken into account to access the Flash
;;;734           memory by reading the FLASH_ACR register */
;;;735        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;736        {
;;;737          return HAL_ERROR;
;;;738        }
;;;739      }
;;;740    
;;;741      /*-------------------------- HCLK Configuration --------------------------*/
;;;742      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;743      {
;;;744        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;745           a non-spec phase whatever we decrease or increase HCLK. */
;;;746        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;747        {
;;;748          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;749        }
;;;750    
;;;751        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;752        {
;;;753          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
;;;754        }
;;;755    
;;;756        /* Set the new HCLK clock divider */
;;;757        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;758        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;759      }
;;;760    
;;;761      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;762      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;763      {
;;;764        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;765    
;;;766        /* HSE is selected as System Clock Source */
;;;767        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;768        {
;;;769          /* Check the HSE ready flag */
;;;770          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;771          {
;;;772            return HAL_ERROR;
;;;773          }
;;;774        }
;;;775        /* PLL is selected as System Clock Source */
;;;776        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;777        {
;;;778          /* Check the PLL ready flag */
;;;779          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;780          {
;;;781            return HAL_ERROR;
;;;782          }
;;;783        }
;;;784        /* HSI is selected as System Clock Source */
;;;785        else
;;;786        {
;;;787          /* Check the HSI ready flag */
;;;788          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;789          {
;;;790            return HAL_ERROR;
;;;791          }
;;;792        }
;;;793    
;;;794        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;795    
;;;796        /* Get Start Tick */
;;;797        tickstart = HAL_GetTick();
;;;798    
;;;799        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;800        {
;;;801          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;802          {
;;;803            return HAL_TIMEOUT;
;;;804          }
;;;805        }
;;;806      }
;;;807    
;;;808      /* Decreasing the number of wait states because of lower CPU frequency */
;;;809      if(FLatency < __HAL_FLASH_GET_LATENCY())
;;;810      {
;;;811         /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;812        __HAL_FLASH_SET_LATENCY(FLatency);
;;;813    
;;;814        /* Check that the new number of wait states is taken into account to access the Flash
;;;815           memory by reading the FLASH_ACR register */
;;;816        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;817        {
;;;818          return HAL_ERROR;
;;;819        }
;;;820      }
;;;821    
;;;822      /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;823      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;824      {
;;;825        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;826        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;827      }
;;;828    
;;;829      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;830      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;831      {
;;;832        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;833        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
;;;834      }
;;;835    
;;;836      /* Update the SystemCoreClock global variable */
;;;837      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
;;;838    
;;;839      /* Configure the source of time base considering new system clocks settings */
;;;840      HAL_InitTick (uwTickPrio);
;;;841    
;;;842      return HAL_OK;
;;;843    }
00000a  bd70              POP      {r4-r6,pc}
                  |L2.12|
00000c  485a              LDR      r0,|L2.376|
00000e  6800              LDR      r0,[r0,#0]            ;728
000010  f000000f          AND      r0,r0,#0xf            ;728
000014  42a8              CMP      r0,r5                 ;728
000016  d209              BCS      |L2.44|
000018  4957              LDR      r1,|L2.376|
00001a  700d              STRB     r5,[r1,#0]            ;731
00001c  4608              MOV      r0,r1                 ;735
00001e  6800              LDR      r0,[r0,#0]            ;735
000020  f000000f          AND      r0,r0,#0xf            ;735
000024  42a8              CMP      r0,r5                 ;735
000026  d001              BEQ      |L2.44|
000028  2001              MOVS     r0,#1                 ;737
00002a  e7ee              B        |L2.10|
                  |L2.44|
00002c  7820              LDRB     r0,[r4,#0]            ;742
00002e  f0000002          AND      r0,r0,#2              ;742
000032  2802              CMP      r0,#2                 ;742
000034  d11d              BNE      |L2.114|
000036  7820              LDRB     r0,[r4,#0]            ;746
000038  f0000004          AND      r0,r0,#4              ;746
00003c  2804              CMP      r0,#4                 ;746
00003e  d105              BNE      |L2.76|
000040  484e              LDR      r0,|L2.380|
000042  6800              LDR      r0,[r0,#0]            ;748
000044  f44050e0          ORR      r0,r0,#0x1c00         ;748
000048  494c              LDR      r1,|L2.380|
00004a  6008              STR      r0,[r1,#0]            ;748
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;751
00004e  f0000008          AND      r0,r0,#8              ;751
000052  2808              CMP      r0,#8                 ;751
000054  d105              BNE      |L2.98|
000056  4849              LDR      r0,|L2.380|
000058  6800              LDR      r0,[r0,#0]            ;753
00005a  f4404060          ORR      r0,r0,#0xe000         ;753
00005e  4947              LDR      r1,|L2.380|
000060  6008              STR      r0,[r1,#0]            ;753
                  |L2.98|
000062  4846              LDR      r0,|L2.380|
000064  6800              LDR      r0,[r0,#0]            ;758
000066  f02000f0          BIC      r0,r0,#0xf0           ;758
00006a  68a1              LDR      r1,[r4,#8]            ;758
00006c  4308              ORRS     r0,r0,r1              ;758
00006e  4943              LDR      r1,|L2.380|
000070  6008              STR      r0,[r1,#0]            ;758
                  |L2.114|
000072  7820              LDRB     r0,[r4,#0]            ;762
000074  f0000001          AND      r0,r0,#1              ;762
000078  b390              CBZ      r0,|L2.224|
00007a  6860              LDR      r0,[r4,#4]            ;767
00007c  2801              CMP      r0,#1                 ;767
00007e  d107              BNE      |L2.144|
000080  483e              LDR      r0,|L2.380|
000082  3808              SUBS     r0,r0,#8              ;770
000084  6800              LDR      r0,[r0,#0]            ;770
000086  f3c04040          UBFX     r0,r0,#17,#1          ;770
00008a  b9a0              CBNZ     r0,|L2.182|
00008c  2001              MOVS     r0,#1                 ;772
00008e  e7bc              B        |L2.10|
                  |L2.144|
000090  6860              LDR      r0,[r4,#4]            ;776
000092  2802              CMP      r0,#2                 ;776
000094  d107              BNE      |L2.166|
000096  4839              LDR      r0,|L2.380|
000098  3808              SUBS     r0,r0,#8              ;779
00009a  6800              LDR      r0,[r0,#0]            ;779
00009c  f3c06040          UBFX     r0,r0,#25,#1          ;779
0000a0  b948              CBNZ     r0,|L2.182|
0000a2  2001              MOVS     r0,#1                 ;781
0000a4  e7b1              B        |L2.10|
                  |L2.166|
0000a6  4835              LDR      r0,|L2.380|
0000a8  3808              SUBS     r0,r0,#8              ;788
0000aa  6800              LDR      r0,[r0,#0]            ;788
0000ac  f3c00040          UBFX     r0,r0,#1,#1           ;788
0000b0  b908              CBNZ     r0,|L2.182|
0000b2  2001              MOVS     r0,#1                 ;790
0000b4  e7a9              B        |L2.10|
                  |L2.182|
0000b6  4831              LDR      r0,|L2.380|
0000b8  6800              LDR      r0,[r0,#0]            ;794
0000ba  f0200003          BIC      r0,r0,#3              ;794
0000be  6861              LDR      r1,[r4,#4]            ;794
0000c0  4308              ORRS     r0,r0,r1              ;794
0000c2  492e              LDR      r1,|L2.380|
0000c4  6008              STR      r0,[r1,#0]            ;794
0000c6  f7fffffe          BL       HAL_GetTick
0000ca  4606              MOV      r6,r0                 ;797
0000cc  e009              B        |L2.226|
                  |L2.206|
0000ce  f7fffffe          BL       HAL_GetTick
0000d2  1b80              SUBS     r0,r0,r6              ;801
0000d4  f2413188          MOV      r1,#0x1388            ;801
0000d8  4288              CMP      r0,r1                 ;801
0000da  d902              BLS      |L2.226|
0000dc  2003              MOVS     r0,#3                 ;803
0000de  e794              B        |L2.10|
                  |L2.224|
0000e0  e007              B        |L2.242|
                  |L2.226|
0000e2  4826              LDR      r0,|L2.380|
0000e4  6800              LDR      r0,[r0,#0]            ;799
0000e6  f000000c          AND      r0,r0,#0xc            ;799
0000ea  6861              LDR      r1,[r4,#4]            ;799
0000ec  ebb00f81          CMP      r0,r1,LSL #2          ;799
0000f0  d1ed              BNE      |L2.206|
                  |L2.242|
0000f2  4821              LDR      r0,|L2.376|
0000f4  6800              LDR      r0,[r0,#0]            ;809
0000f6  f000000f          AND      r0,r0,#0xf            ;809
0000fa  42a8              CMP      r0,r5                 ;809
0000fc  d909              BLS      |L2.274|
0000fe  491e              LDR      r1,|L2.376|
000100  700d              STRB     r5,[r1,#0]            ;812
000102  4608              MOV      r0,r1                 ;816
000104  6800              LDR      r0,[r0,#0]            ;816
000106  f000000f          AND      r0,r0,#0xf            ;816
00010a  42a8              CMP      r0,r5                 ;816
00010c  d001              BEQ      |L2.274|
00010e  2001              MOVS     r0,#1                 ;818
000110  e77b              B        |L2.10|
                  |L2.274|
000112  7820              LDRB     r0,[r4,#0]            ;823
000114  f0000004          AND      r0,r0,#4              ;823
000118  2804              CMP      r0,#4                 ;823
00011a  d107              BNE      |L2.300|
00011c  4817              LDR      r0,|L2.380|
00011e  6800              LDR      r0,[r0,#0]            ;826
000120  f42050e0          BIC      r0,r0,#0x1c00         ;826
000124  68e1              LDR      r1,[r4,#0xc]          ;826
000126  4308              ORRS     r0,r0,r1              ;826
000128  4914              LDR      r1,|L2.380|
00012a  6008              STR      r0,[r1,#0]            ;826
                  |L2.300|
00012c  7820              LDRB     r0,[r4,#0]            ;830
00012e  f0000008          AND      r0,r0,#8              ;830
000132  2808              CMP      r0,#8                 ;830
000134  d108              BNE      |L2.328|
000136  4811              LDR      r0,|L2.380|
000138  6800              LDR      r0,[r0,#0]            ;833
00013a  f4204060          BIC      r0,r0,#0xe000         ;833
00013e  6921              LDR      r1,[r4,#0x10]         ;833
000140  ea4000c1          ORR      r0,r0,r1,LSL #3       ;833
000144  490d              LDR      r1,|L2.380|
000146  6008              STR      r0,[r1,#0]            ;833
                  |L2.328|
000148  f7fffffe          BL       HAL_RCC_GetSysClockFreq
00014c  490b              LDR      r1,|L2.380|
00014e  6809              LDR      r1,[r1,#0]            ;837
000150  f00101f0          AND      r1,r1,#0xf0           ;837
000154  22f0              MOVS     r2,#0xf0              ;837
000156  fa92f2a2          RBIT     r2,r2                 ;837
00015a  fab2f282          CLZ      r2,r2                 ;837
00015e  40d1              LSRS     r1,r1,r2              ;837
000160  4a07              LDR      r2,|L2.384|
000162  5c51              LDRB     r1,[r2,r1]            ;837
000164  40c8              LSRS     r0,r0,r1              ;837
000166  4907              LDR      r1,|L2.388|
000168  6008              STR      r0,[r1,#0]            ;837  ; SystemCoreClock
00016a  4807              LDR      r0,|L2.392|
00016c  6800              LDR      r0,[r0,#0]            ;840  ; uwTickPrio
00016e  f7fffffe          BL       HAL_InitTick
000172  2000              MOVS     r0,#0                 ;842
000174  e749              B        |L2.10|
;;;844    
                          ENDP

000176  0000              DCW      0x0000
                  |L2.376|
                          DCD      0x40023c00
                  |L2.380|
                          DCD      0x40023808
                  |L2.384|
                          DCD      AHBPrescTable
                  |L2.388|
                          DCD      SystemCoreClock
                  |L2.392|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;220      */
;;;221    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;222    {
;;;223      uint32_t tickstart;
;;;224    
;;;225      /* Get Start Tick*/
;;;226      tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;227    
;;;228      /* Set HSION bit to the reset value */
;;;229      SET_BIT(RCC->CR, RCC_CR_HSION);
000008  4849              LDR      r0,|L3.304|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  4947              LDR      r1,|L3.304|
000012  6008              STR      r0,[r1,#0]
;;;230    
;;;231      /* Wait till HSI is ready */
;;;232      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L3.36|
                  |L3.22|
;;;233      {
;;;234        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L3.36|
;;;235        {
;;;236          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;237        }
;;;238      }
;;;239    
;;;240      /* Set HSITRIM[4:0] bits to the reset value */
;;;241      SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;242    
;;;243      /* Get Start Tick*/
;;;244      tickstart = HAL_GetTick();
;;;245    
;;;246      /* Reset CFGR register (HSI is selected as system clock source) */
;;;247      RCC->CFGR = 0x00000000u;
;;;248    
;;;249      /* Wait till clock switch is ready */
;;;250      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;251      {
;;;252        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;253        {
;;;254          return HAL_TIMEOUT;
;;;255        }
;;;256      }
;;;257    
;;;258      /* Get Start Tick */
;;;259      tickstart = HAL_GetTick();
;;;260    
;;;261      /* Clear CR register in 3 steps: first to clear HSEON, HSEBYP and CSSON bits */
;;;262      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;263    
;;;264      /* Wait till HSE is disabled */
;;;265      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;266      {
;;;267        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;268        {
;;;269          return HAL_TIMEOUT;
;;;270        }
;;;271      }
;;;272    
;;;273      /* Get Start Tick */
;;;274      tickstart = HAL_GetTick();
;;;275    
;;;276      /* Second step is to clear PLLON bit */
;;;277      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;278    
;;;279      /* Wait till PLL is disabled */
;;;280      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;281      {
;;;282        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;283        {
;;;284          return HAL_TIMEOUT;
;;;285        }
;;;286      }
;;;287    
;;;288      /* Once PLL is OFF, reset PLLCFGR register to default value */
;;;289      RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
;;;290    
;;;291      /* Get Start Tick */
;;;292      tickstart = HAL_GetTick();
;;;293    
;;;294      /* Third step is to clear PLLI2SON bit */
;;;295      CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;296    
;;;297      /* Wait till PLLI2S is disabled */
;;;298      while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;299      {
;;;300        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;301        {
;;;302          return HAL_TIMEOUT;
;;;303        }
;;;304      }
;;;305    
;;;306      /* Once PLLI2S is OFF, reset PLLI2SCFGR register to default value */
;;;307      RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;308    
;;;309      /* Disable all interrupts */
;;;310      RCC->CIR = 0x00000000u;
;;;311    
;;;312      /* Clear all flags */
;;;313      RCC->CSR = 0xFFFFFFFFu;
;;;314    
;;;315      /* Update the SystemCoreClock global variable */
;;;316      SystemCoreClock = HSI_VALUE;
;;;317    
;;;318      /* Adapt Systick interrupt period */
;;;319      if(HAL_InitTick(uwTickPrio) != HAL_OK)
;;;320      {
;;;321        return HAL_ERROR;
;;;322      }
;;;323      else
;;;324      {
;;;325        return HAL_OK;
;;;326      }
;;;327    }
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  4842              LDR      r0,|L3.304|
000026  6800              LDR      r0,[r0,#0]            ;232
000028  f0000002          AND      r0,r0,#2              ;232
00002c  2800              CMP      r0,#0                 ;232
00002e  d0f2              BEQ      |L3.22|
000030  483f              LDR      r0,|L3.304|
000032  6800              LDR      r0,[r0,#0]            ;241
000034  f0400080          ORR      r0,r0,#0x80           ;241
000038  493d              LDR      r1,|L3.304|
00003a  6008              STR      r0,[r1,#0]            ;241
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;244
000042  2000              MOVS     r0,#0                 ;247
000044  493a              LDR      r1,|L3.304|
000046  3108              ADDS     r1,r1,#8              ;247
000048  6008              STR      r0,[r1,#0]            ;247
00004a  e008              B        |L3.94|
                  |L3.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;252
000052  f2413188          MOV      r1,#0x1388            ;252
000056  4288              CMP      r0,r1                 ;252
000058  d901              BLS      |L3.94|
00005a  2003              MOVS     r0,#3                 ;254
00005c  e7e1              B        |L3.34|
                  |L3.94|
00005e  4834              LDR      r0,|L3.304|
000060  3008              ADDS     r0,r0,#8              ;250
000062  6800              LDR      r0,[r0,#0]            ;250
000064  f000000c          AND      r0,r0,#0xc            ;250
000068  2800              CMP      r0,#0                 ;250
00006a  d1ef              BNE      |L3.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;259
000072  482f              LDR      r0,|L3.304|
000074  6800              LDR      r0,[r0,#0]            ;262
000076  f4202050          BIC      r0,r0,#0xd0000        ;262
00007a  492d              LDR      r1,|L3.304|
00007c  6008              STR      r0,[r1,#0]            ;262
00007e  e006              B        |L3.142|
                  |L3.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;267
000086  2864              CMP      r0,#0x64              ;267
000088  d901              BLS      |L3.142|
00008a  2003              MOVS     r0,#3                 ;269
00008c  e7c9              B        |L3.34|
                  |L3.142|
00008e  4828              LDR      r0,|L3.304|
000090  6800              LDR      r0,[r0,#0]            ;265
000092  f4003000          AND      r0,r0,#0x20000        ;265
000096  2800              CMP      r0,#0                 ;265
000098  d1f2              BNE      |L3.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;274
0000a0  4823              LDR      r0,|L3.304|
0000a2  6800              LDR      r0,[r0,#0]            ;277
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;277
0000a8  4921              LDR      r1,|L3.304|
0000aa  6008              STR      r0,[r1,#0]            ;277
0000ac  e006              B        |L3.188|
                  |L3.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;282
0000b4  2864              CMP      r0,#0x64              ;282
0000b6  d901              BLS      |L3.188|
0000b8  2003              MOVS     r0,#3                 ;284
0000ba  e7b2              B        |L3.34|
                  |L3.188|
0000bc  481c              LDR      r0,|L3.304|
0000be  6800              LDR      r0,[r0,#0]            ;280
0000c0  f0007000          AND      r0,r0,#0x2000000      ;280
0000c4  2800              CMP      r0,#0                 ;280
0000c6  d1f2              BNE      |L3.174|
0000c8  481a              LDR      r0,|L3.308|
0000ca  4919              LDR      r1,|L3.304|
0000cc  1d09              ADDS     r1,r1,#4              ;289
0000ce  6008              STR      r0,[r1,#0]            ;289
0000d0  f7fffffe          BL       HAL_GetTick
0000d4  4604              MOV      r4,r0                 ;292
0000d6  4816              LDR      r0,|L3.304|
0000d8  6800              LDR      r0,[r0,#0]            ;295
0000da  f0206080          BIC      r0,r0,#0x4000000      ;295
0000de  4914              LDR      r1,|L3.304|
0000e0  6008              STR      r0,[r1,#0]            ;295
0000e2  e006              B        |L3.242|
                  |L3.228|
0000e4  f7fffffe          BL       HAL_GetTick
0000e8  1b00              SUBS     r0,r0,r4              ;300
0000ea  2802              CMP      r0,#2                 ;300
0000ec  d901              BLS      |L3.242|
0000ee  2003              MOVS     r0,#3                 ;302
0000f0  e797              B        |L3.34|
                  |L3.242|
0000f2  480f              LDR      r0,|L3.304|
0000f4  6800              LDR      r0,[r0,#0]            ;298
0000f6  f0006000          AND      r0,r0,#0x8000000      ;298
0000fa  2800              CMP      r0,#0                 ;298
0000fc  d1f2              BNE      |L3.228|
0000fe  480e              LDR      r0,|L3.312|
000100  490b              LDR      r1,|L3.304|
000102  3184              ADDS     r1,r1,#0x84           ;307
000104  6008              STR      r0,[r1,#0]            ;307
000106  2000              MOVS     r0,#0                 ;310
000108  4909              LDR      r1,|L3.304|
00010a  310c              ADDS     r1,r1,#0xc            ;310
00010c  6008              STR      r0,[r1,#0]            ;310
00010e  1e40              SUBS     r0,r0,#1              ;313
000110  4907              LDR      r1,|L3.304|
000112  3174              ADDS     r1,r1,#0x74           ;313
000114  6008              STR      r0,[r1,#0]            ;313
000116  4809              LDR      r0,|L3.316|
000118  4909              LDR      r1,|L3.320|
00011a  6008              STR      r0,[r1,#0]            ;316  ; SystemCoreClock
00011c  4809              LDR      r0,|L3.324|
00011e  6800              LDR      r0,[r0,#0]            ;319  ; uwTickPrio
000120  f7fffffe          BL       HAL_InitTick
000124  b108              CBZ      r0,|L3.298|
000126  2001              MOVS     r0,#1                 ;321
000128  e77b              B        |L3.34|
                  |L3.298|
00012a  2000              MOVS     r0,#0                 ;325
00012c  e779              B        |L3.34|
;;;328    
                          ENDP

00012e  0000              DCW      0x0000
                  |L3.304|
                          DCD      0x40023800
                  |L3.308|
                          DCD      0x04003010
                  |L3.312|
                          DCD      0x20003000
                  |L3.316|
                          DCD      0x00f42400
                  |L3.320|
                          DCD      SystemCoreClock
                  |L3.324|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;952      */
;;;953    void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;954    {
;;;955      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;956    }
000006  4770              BX       lr
;;;957    
                          ENDP

                  |L4.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;943      */
;;;944    void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;945    {
;;;946      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;947    }
000006  4770              BX       lr
;;;948    
                          ENDP

                  |L5.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1158     */
;;;1159   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1160   {
;;;1161     /* Set all possible values for the Clock type parameter --------------------*/
;;;1162     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1163   
;;;1164     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1165     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1166   
;;;1167     /* Get the HCLK configuration ----------------------------------------------*/
;;;1168     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1169   
;;;1170     /* Get the APB1 configuration ----------------------------------------------*/
;;;1171     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1172   
;;;1173     /* Get the APB2 configuration ----------------------------------------------*/
;;;1174     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1175   
;;;1176     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1177     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f002020f          AND      r2,r2,#0xf
000036  600a              STR      r2,[r1,#0]
;;;1178   }
000038  4770              BX       lr
;;;1179   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1043     */
;;;1044   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1045   {
;;;1046     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1047   }
000004  4770              BX       lr
;;;1048   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1079     */
;;;1080   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;1081   {
;;;1082     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1083     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;1084   
;;;1085     /* Get the HSE configuration -----------------------------------------------*/
;;;1086     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  4946              LDR      r1,|L8.288|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d102              BNE      |L8.24|
;;;1087     {
;;;1088       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  2105              MOVS     r1,#5
000014  6041              STR      r1,[r0,#4]
000016  e00b              B        |L8.48|
                  |L8.24|
;;;1089     }
;;;1090     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
000018  4941              LDR      r1,|L8.288|
00001a  6809              LDR      r1,[r1,#0]
00001c  f4013180          AND      r1,r1,#0x10000
000020  f5b13f80          CMP      r1,#0x10000
000024  d102              BNE      |L8.44|
;;;1091     {
;;;1092       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000026  2101              MOVS     r1,#1
000028  6041              STR      r1,[r0,#4]
00002a  e001              B        |L8.48|
                  |L8.44|
;;;1093     }
;;;1094     else
;;;1095     {
;;;1096       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
00002c  2100              MOVS     r1,#0
00002e  6041              STR      r1,[r0,#4]
                  |L8.48|
;;;1097     }
;;;1098   
;;;1099     /* Get the HSI configuration -----------------------------------------------*/
;;;1100     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000030  493b              LDR      r1,|L8.288|
000032  6809              LDR      r1,[r1,#0]
000034  f0010101          AND      r1,r1,#1
000038  b111              CBZ      r1,|L8.64|
;;;1101     {
;;;1102       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003a  2101              MOVS     r1,#1
00003c  60c1              STR      r1,[r0,#0xc]
00003e  e001              B        |L8.68|
                  |L8.64|
;;;1103     }
;;;1104     else
;;;1105     {
;;;1106       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000040  2100              MOVS     r1,#0
000042  60c1              STR      r1,[r0,#0xc]
                  |L8.68|
;;;1107     }
;;;1108   
;;;1109     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
000044  4936              LDR      r1,|L8.288|
000046  6809              LDR      r1,[r1,#0]
000048  f00101f8          AND      r1,r1,#0xf8
00004c  22f8              MOVS     r2,#0xf8
00004e  fa92f2a2          RBIT     r2,r2
000052  fab2f282          CLZ      r2,r2
000056  40d1              LSRS     r1,r1,r2
000058  6101              STR      r1,[r0,#0x10]
;;;1110   
;;;1111     /* Get the LSE configuration -----------------------------------------------*/
;;;1112     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00005a  4931              LDR      r1,|L8.288|
00005c  3170              ADDS     r1,r1,#0x70
00005e  6809              LDR      r1,[r1,#0]
000060  f0010104          AND      r1,r1,#4
000064  2904              CMP      r1,#4
000066  d102              BNE      |L8.110|
;;;1113     {
;;;1114       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000068  2105              MOVS     r1,#5
00006a  6081              STR      r1,[r0,#8]
00006c  e00a              B        |L8.132|
                  |L8.110|
;;;1115     }
;;;1116     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
00006e  492c              LDR      r1,|L8.288|
000070  3170              ADDS     r1,r1,#0x70
000072  6809              LDR      r1,[r1,#0]
000074  f0010101          AND      r1,r1,#1
000078  b111              CBZ      r1,|L8.128|
;;;1117     {
;;;1118       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00007a  2101              MOVS     r1,#1
00007c  6081              STR      r1,[r0,#8]
00007e  e001              B        |L8.132|
                  |L8.128|
;;;1119     }
;;;1120     else
;;;1121     {
;;;1122       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000080  2100              MOVS     r1,#0
000082  6081              STR      r1,[r0,#8]
                  |L8.132|
;;;1123     }
;;;1124   
;;;1125     /* Get the LSI configuration -----------------------------------------------*/
;;;1126     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
000084  4926              LDR      r1,|L8.288|
000086  3174              ADDS     r1,r1,#0x74
000088  6809              LDR      r1,[r1,#0]
00008a  f0010101          AND      r1,r1,#1
00008e  b111              CBZ      r1,|L8.150|
;;;1127     {
;;;1128       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000090  2101              MOVS     r1,#1
000092  6141              STR      r1,[r0,#0x14]
000094  e001              B        |L8.154|
                  |L8.150|
;;;1129     }
;;;1130     else
;;;1131     {
;;;1132       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
000096  2100              MOVS     r1,#0
000098  6141              STR      r1,[r0,#0x14]
                  |L8.154|
;;;1133     }
;;;1134   
;;;1135     /* Get the PLL configuration -----------------------------------------------*/
;;;1136     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
00009a  4921              LDR      r1,|L8.288|
00009c  6809              LDR      r1,[r1,#0]
00009e  f0017180          AND      r1,r1,#0x1000000
0000a2  f1b17f80          CMP      r1,#0x1000000
0000a6  d102              BNE      |L8.174|
;;;1137     {
;;;1138       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a8  2102              MOVS     r1,#2
0000aa  6181              STR      r1,[r0,#0x18]
0000ac  e001              B        |L8.178|
                  |L8.174|
;;;1139     }
;;;1140     else
;;;1141     {
;;;1142       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000ae  2101              MOVS     r1,#1
0000b0  6181              STR      r1,[r0,#0x18]
                  |L8.178|
;;;1143     }
;;;1144     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000b2  491b              LDR      r1,|L8.288|
0000b4  1d09              ADDS     r1,r1,#4
0000b6  6809              LDR      r1,[r1,#0]
0000b8  f4010280          AND      r2,r1,#0x400000
0000bc  61c2              STR      r2,[r0,#0x1c]
;;;1145     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000be  4918              LDR      r1,|L8.288|
0000c0  1d09              ADDS     r1,r1,#4
0000c2  6809              LDR      r1,[r1,#0]
0000c4  f001023f          AND      r2,r1,#0x3f
0000c8  6202              STR      r2,[r0,#0x20]
;;;1146     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
0000ca  4915              LDR      r1,|L8.288|
0000cc  1d09              ADDS     r1,r1,#4
0000ce  6809              LDR      r1,[r1,#0]
0000d0  f64772c0          MOV      r2,#0x7fc0
0000d4  4011              ANDS     r1,r1,r2
0000d6  fa92f2a2          RBIT     r2,r2
0000da  fab2f282          CLZ      r2,r2
0000de  40d1              LSRS     r1,r1,r2
0000e0  6241              STR      r1,[r0,#0x24]
;;;1147     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
0000e2  490f              LDR      r1,|L8.288|
0000e4  1d09              ADDS     r1,r1,#4
0000e6  6809              LDR      r1,[r1,#0]
0000e8  f4013140          AND      r1,r1,#0x30000
0000ec  f5013180          ADD      r1,r1,#0x10000
0000f0  0049              LSLS     r1,r1,#1
0000f2  f44f3240          MOV      r2,#0x30000
0000f6  fa92f2a2          RBIT     r2,r2
0000fa  fab2f282          CLZ      r2,r2
0000fe  40d1              LSRS     r1,r1,r2
000100  6281              STR      r1,[r0,#0x28]
;;;1148     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
000102  4907              LDR      r1,|L8.288|
000104  1d09              ADDS     r1,r1,#4
000106  6809              LDR      r1,[r1,#0]
000108  f0016170          AND      r1,r1,#0xf000000
00010c  f04f6270          MOV      r2,#0xf000000
000110  fa92f2a2          RBIT     r2,r2
000114  fab2f282          CLZ      r2,r2
000118  40d1              LSRS     r1,r1,r2
00011a  62c1              STR      r1,[r0,#0x2c]
;;;1149   }
00011c  4770              BX       lr
;;;1150   
                          ENDP

00011e  0000              DCW      0x0000
                  |L8.288|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1054     */
;;;1055   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1056   {
;;;1057     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1058     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L9.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f40151e0          AND      r1,r1,#0x1c00
00000e  f44f52e0          MOV      r2,#0x1c00
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L9.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;1059   }
000022  bd00              POP      {pc}
;;;1060   
                          ENDP

                  |L9.36|
                          DCD      0x40023808
                  |L9.40|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1066     */
;;;1067   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1068   {
;;;1069     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1070     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4907              LDR      r1,|L10.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f4014160          AND      r1,r1,#0xe000
00000e  f44f4260          MOV      r2,#0xe000
000012  fa92f2a2          RBIT     r2,r2
000016  fab2f282          CLZ      r2,r2
00001a  40d1              LSRS     r1,r1,r2
00001c  4a02              LDR      r2,|L10.40|
00001e  5c51              LDRB     r1,[r2,r1]
000020  40c8              LSRS     r0,r0,r1
;;;1071   }
000022  bd00              POP      {pc}
;;;1072   
                          ENDP

                  |L10.36|
                          DCD      0x40023808
                  |L10.40|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;987      */
;;;988    uint32_t HAL_RCC_GetSysClockFreq(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;989    {
;;;990      uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;991      uint32_t sysclockfreq = 0U;
00000a  46a1              MOV      r9,r4
;;;992    
;;;993      /* Get SYSCLK source -------------------------------------------------------*/
;;;994      switch (RCC->CFGR & RCC_CFGR_SWS)
00000c  4825              LDR      r0,|L11.164|
00000e  6800              LDR      r0,[r0,#0]
000010  f000000c          AND      r0,r0,#0xc
000014  b120              CBZ      r0,|L11.32|
000016  2804              CMP      r0,#4
000018  d005              BEQ      |L11.38|
00001a  2808              CMP      r0,#8
00001c  d13a              BNE      |L11.148|
00001e  e005              B        |L11.44|
                  |L11.32|
;;;995      {
;;;996        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;997        {
;;;998          sysclockfreq = HSI_VALUE;
000020  f8df9084          LDR      r9,|L11.168|
;;;999           break;
000024  e039              B        |L11.154|
                  |L11.38|
;;;1000       }
;;;1001       case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;1002       {
;;;1003         sysclockfreq = HSE_VALUE;
000026  f8df9084          LDR      r9,|L11.172|
;;;1004         break;
00002a  e036              B        |L11.154|
                  |L11.44|
;;;1005       }
;;;1006       case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;1007       {
;;;1008         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1009         SYSCLK = PLL_VCO / PLLP */
;;;1010         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  481d              LDR      r0,|L11.164|
00002e  1f00              SUBS     r0,r0,#4
000030  6800              LDR      r0,[r0,#0]
000032  f000043f          AND      r4,r0,#0x3f
;;;1011         if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
000036  481b              LDR      r0,|L11.164|
000038  1f00              SUBS     r0,r0,#4
00003a  6800              LDR      r0,[r0,#0]
00003c  f4000080          AND      r0,r0,#0x400000
000040  b178              CBZ      r0,|L11.98|
;;;1012         {
;;;1013           /* HSE used as PLL clock source */
;;;1014           pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000042  481a              LDR      r0,|L11.172|
000044  4917              LDR      r1,|L11.164|
000046  1f09              SUBS     r1,r1,#4
000048  6809              LDR      r1,[r1,#0]
00004a  f3c11188          UBFX     r1,r1,#6,#9
00004e  fba07001          UMULL    r7,r0,r0,r1
000052  4601              MOV      r1,r0
000054  4622              MOV      r2,r4
000056  2300              MOVS     r3,#0
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       __aeabi_uldivmod
00005e  4605              MOV      r5,r0
000060  e00e              B        |L11.128|
                  |L11.98|
;;;1015         }
;;;1016         else
;;;1017         {
;;;1018           /* HSI used as PLL clock source */
;;;1019           pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000062  4811              LDR      r0,|L11.168|
000064  490f              LDR      r1,|L11.164|
000066  1f09              SUBS     r1,r1,#4
000068  6809              LDR      r1,[r1,#0]
00006a  f3c11188          UBFX     r1,r1,#6,#9
00006e  fba07001          UMULL    r7,r0,r0,r1
000072  4601              MOV      r1,r0
000074  4622              MOV      r2,r4
000076  2300              MOVS     r3,#0
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       __aeabi_uldivmod
00007e  4605              MOV      r5,r0
                  |L11.128|
;;;1020         }
;;;1021         pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
000080  4808              LDR      r0,|L11.164|
000082  1f00              SUBS     r0,r0,#4
000084  6800              LDR      r0,[r0,#0]
000086  f3c04001          UBFX     r0,r0,#16,#2
00008a  1c40              ADDS     r0,r0,#1
00008c  0046              LSLS     r6,r0,#1
;;;1022   
;;;1023         sysclockfreq = pllvco/pllp;
00008e  fbb5f9f6          UDIV     r9,r5,r6
;;;1024         break;
000092  e002              B        |L11.154|
                  |L11.148|
;;;1025       }
;;;1026       default:
;;;1027       {
;;;1028         sysclockfreq = HSI_VALUE;
000094  f8df9010          LDR      r9,|L11.168|
;;;1029         break;
000098  bf00              NOP      
                  |L11.154|
00009a  bf00              NOP                            ;999
;;;1030       }
;;;1031     }
;;;1032     return sysclockfreq;
00009c  4648              MOV      r0,r9
;;;1033   }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;1034   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      0x40023808
                  |L11.168|
                          DCD      0x00f42400
                  |L11.172|
                          DCD      0x017d7840

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;889      */
;;;890    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;891    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;892      GPIO_InitTypeDef GPIO_InitStruct;
;;;893      /* Check the parameters */
;;;894      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;895      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;896      /* RCC_MCO1 */
;;;897      if(RCC_MCOx == RCC_MCO1)
00000a  bb46              CBNZ     r6,|L12.94|
;;;898      {
;;;899        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;900    
;;;901        /* MCO1 Clock Enable */
;;;902        __MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4828              LDR      r0,|L12.180|
000014  6800              LDR      r0,[r0,#0]
000016  f0400001          ORR      r0,r0,#1
00001a  4926              LDR      r1,|L12.180|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;903    
;;;904        /* Configure the MCO1 pin in alternate function mode */
;;;905        GPIO_InitStruct.Pin = MCO1_PIN;
00002c  1588              ASRS     r0,r1,#22
00002e  9001              STR      r0,[sp,#4]
;;;906        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000030  2002              MOVS     r0,#2
000032  9002              STR      r0,[sp,#8]
;;;907        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000034  2003              MOVS     r0,#3
000036  9004              STR      r0,[sp,#0x10]
;;;908        GPIO_InitStruct.Pull = GPIO_NOPULL;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;909        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00003c  9005              STR      r0,[sp,#0x14]
;;;910        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003e  a901              ADD      r1,sp,#4
000040  481d              LDR      r0,|L12.184|
000042  f7fffffe          BL       HAL_GPIO_Init
;;;911    
;;;912        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;913        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000046  481b              LDR      r0,|L12.180|
000048  3828              SUBS     r0,r0,#0x28
00004a  6800              LDR      r0,[r0,#0]
00004c  f02060ec          BIC      r0,r0,#0x7600000
000050  ea440105          ORR      r1,r4,r5
000054  4308              ORRS     r0,r0,r1
000056  4917              LDR      r1,|L12.180|
000058  3928              SUBS     r1,r1,#0x28
00005a  6008              STR      r0,[r1,#0]
00005c  e027              B        |L12.174|
                  |L12.94|
;;;914      }
;;;915      else
;;;916      {
;;;917        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;918    
;;;919        /* MCO2 Clock Enable */
;;;920        __MCO2_CLK_ENABLE();
00005e  bf00              NOP      
000060  2000              MOVS     r0,#0
000062  9000              STR      r0,[sp,#0]
000064  4813              LDR      r0,|L12.180|
000066  6800              LDR      r0,[r0,#0]
000068  f0400004          ORR      r0,r0,#4
00006c  4911              LDR      r1,|L12.180|
00006e  6008              STR      r0,[r1,#0]
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0000004          AND      r0,r0,#4
000078  9000              STR      r0,[sp,#0]
00007a  bf00              NOP      
00007c  bf00              NOP      
;;;921    
;;;922        /* Configure the MCO2 pin in alternate function mode */
;;;923        GPIO_InitStruct.Pin = MCO2_PIN;
00007e  1548              ASRS     r0,r1,#21
000080  9001              STR      r0,[sp,#4]
;;;924        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000082  2002              MOVS     r0,#2
000084  9002              STR      r0,[sp,#8]
;;;925        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000086  2003              MOVS     r0,#3
000088  9004              STR      r0,[sp,#0x10]
;;;926        GPIO_InitStruct.Pull = GPIO_NOPULL;
00008a  2000              MOVS     r0,#0
00008c  9003              STR      r0,[sp,#0xc]
;;;927        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00008e  9005              STR      r0,[sp,#0x14]
;;;928        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000090  a901              ADD      r1,sp,#4
000092  480a              LDR      r0,|L12.188|
000094  f7fffffe          BL       HAL_GPIO_Init
;;;929    
;;;930        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;931        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
000098  4806              LDR      r0,|L12.180|
00009a  3828              SUBS     r0,r0,#0x28
00009c  6800              LDR      r0,[r0,#0]
00009e  f0204078          BIC      r0,r0,#0xf8000000
0000a2  ea4401c5          ORR      r1,r4,r5,LSL #3
0000a6  4308              ORRS     r0,r0,r1
0000a8  4902              LDR      r1,|L12.180|
0000aa  3928              SUBS     r1,r1,#0x28
0000ac  6008              STR      r0,[r1,#0]
                  |L12.174|
;;;932      }
;;;933    }
0000ae  b006              ADD      sp,sp,#0x18
0000b0  bd70              POP      {r4-r6,pc}
;;;934    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40023830
                  |L12.184|
                          DCD      0x40020000
                  |L12.188|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1184     */
;;;1185   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1186   {
;;;1187     /* Check RCC CSSF flag  */
;;;1188     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1189     {
;;;1190       /* RCC Clock Security System interrupt user callback */
;;;1191       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1192   
;;;1193       /* Clear RCC CSS pending bit */
;;;1194       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1195     }
;;;1196   }
00001a  bd10              POP      {r4,pc}
;;;1197   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;342      */
;;;343    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      uint32_t tickstart;
;;;346    
;;;347      /* Check Null pointer */
;;;348      if(RCC_OscInitStruct == NULL)
000004  b90c              CBNZ     r4,|L14.10|
;;;349      {
;;;350        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L14.8|
;;;351      }
;;;352    
;;;353      /* Check the parameters */
;;;354      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;355      /*------------------------------- HSE Configuration ------------------------*/
;;;356      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;357      {
;;;358        /* Check the parameters */
;;;359        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;360        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;361        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
;;;362          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;363        {
;;;364          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;365          {
;;;366            return HAL_ERROR;
;;;367          }
;;;368        }
;;;369        else
;;;370        {
;;;371          /* Set the new HSE configuration ---------------------------------------*/
;;;372          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;373    
;;;374          /* Check the HSE State */
;;;375          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;376          {
;;;377            /* Get Start Tick */
;;;378            tickstart = HAL_GetTick();
;;;379    
;;;380            /* Wait till HSE is ready */
;;;381            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;382            {
;;;383              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;384              {
;;;385                return HAL_TIMEOUT;
;;;386              }
;;;387            }
;;;388          }
;;;389          else
;;;390          {
;;;391            /* Get Start Tick */
;;;392            tickstart = HAL_GetTick();
;;;393    
;;;394            /* Wait till HSE is bypassed or disabled */
;;;395            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;396            {
;;;397              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;398              {
;;;399                return HAL_TIMEOUT;
;;;400              }
;;;401            }
;;;402          }
;;;403        }
;;;404      }
;;;405      /*----------------------------- HSI Configuration --------------------------*/
;;;406      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;407      {
;;;408        /* Check the parameters */
;;;409        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;410        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;411    
;;;412        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;413        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
;;;414          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;415        {
;;;416          /* When HSI is used as system clock it will not disabled */
;;;417          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;418          {
;;;419            return HAL_ERROR;
;;;420          }
;;;421          /* Otherwise, just the calibration is allowed */
;;;422          else
;;;423          {
;;;424            /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
;;;425            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;426          }
;;;427        }
;;;428        else
;;;429        {
;;;430          /* Check the HSI State */
;;;431          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;432          {
;;;433            /* Enable the Internal High Speed oscillator (HSI). */
;;;434            __HAL_RCC_HSI_ENABLE();
;;;435    
;;;436            /* Get Start Tick */
;;;437            tickstart = HAL_GetTick();
;;;438    
;;;439            /* Wait till HSI is ready */
;;;440            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;441            {
;;;442              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;443              {
;;;444                return HAL_TIMEOUT;
;;;445              }
;;;446            }
;;;447    
;;;448            /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
;;;449            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;450          }
;;;451          else
;;;452          {
;;;453            /* Disable the Internal High Speed oscillator (HSI). */
;;;454            __HAL_RCC_HSI_DISABLE();
;;;455    
;;;456            /* Get Start Tick */
;;;457            tickstart = HAL_GetTick();
;;;458    
;;;459            /* Wait till HSI is ready */
;;;460            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;461            {
;;;462              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;463              {
;;;464                return HAL_TIMEOUT;
;;;465              }
;;;466            }
;;;467          }
;;;468        }
;;;469      }
;;;470      /*------------------------------ LSI Configuration -------------------------*/
;;;471      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;472      {
;;;473        /* Check the parameters */
;;;474        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;475    
;;;476        /* Check the LSI State */
;;;477        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;478        {
;;;479          /* Enable the Internal Low Speed oscillator (LSI). */
;;;480          __HAL_RCC_LSI_ENABLE();
;;;481    
;;;482          /* Get Start Tick */
;;;483          tickstart = HAL_GetTick();
;;;484    
;;;485          /* Wait till LSI is ready */
;;;486          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;487          {
;;;488            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;489            {
;;;490              return HAL_TIMEOUT;
;;;491            }
;;;492          }
;;;493        }
;;;494        else
;;;495        {
;;;496          /* Disable the Internal Low Speed oscillator (LSI). */
;;;497          __HAL_RCC_LSI_DISABLE();
;;;498    
;;;499          /* Get Start Tick */
;;;500          tickstart = HAL_GetTick();
;;;501    
;;;502          /* Wait till LSI is ready */
;;;503          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;504          {
;;;505            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;506            {
;;;507              return HAL_TIMEOUT;
;;;508            }
;;;509          }
;;;510        }
;;;511      }
;;;512      /*------------------------------ LSE Configuration -------------------------*/
;;;513      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;514      {
;;;515        FlagStatus       pwrclkchanged = RESET;
;;;516    
;;;517        /* Check the parameters */
;;;518        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;519    
;;;520        /* Update LSE configuration in Backup Domain control register    */
;;;521        /* Requires to enable write access to Backup Domain of necessary */
;;;522        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;523        {
;;;524          __HAL_RCC_PWR_CLK_ENABLE();
;;;525          pwrclkchanged = SET;
;;;526        }
;;;527    
;;;528        /* Enable write access to Backup domain */
;;;529        PWR->CR |= PWR_CR_DBP;
;;;530    
;;;531        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;532        {
;;;533          /* Enable write access to Backup domain */
;;;534          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;535    
;;;536          /* Wait for Backup domain Write protection disable */
;;;537          tickstart = HAL_GetTick();
;;;538    
;;;539          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;540          {
;;;541            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;542            {
;;;543              return HAL_TIMEOUT;
;;;544            }
;;;545          }
;;;546        }
;;;547    
;;;548        /* Set the new LSE configuration -----------------------------------------*/
;;;549        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;550        /* Check the LSE State */
;;;551        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;552        {
;;;553          /* Get Start Tick */
;;;554          tickstart = HAL_GetTick();
;;;555    
;;;556          /* Wait till LSE is ready */
;;;557          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;558          {
;;;559            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;560            {
;;;561              return HAL_TIMEOUT;
;;;562            }
;;;563          }
;;;564        }
;;;565        else
;;;566        {
;;;567          /* Get Start Tick */
;;;568          tickstart = HAL_GetTick();
;;;569    
;;;570          /* Wait till LSE is ready */
;;;571          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;572          {
;;;573            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;574            {
;;;575              return HAL_TIMEOUT;
;;;576            }
;;;577          }
;;;578        }
;;;579    
;;;580        /* Restore clock configuration if changed */
;;;581        if(pwrclkchanged == SET)
;;;582        {
;;;583          __HAL_RCC_PWR_CLK_DISABLE();
;;;584        }
;;;585      }
;;;586      /*-------------------------------- PLL Configuration -----------------------*/
;;;587      /* Check the parameters */
;;;588      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;589      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;590      {
;;;591        /* Check if the PLL is used as system clock or not */
;;;592        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;593        {
;;;594          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;595          {
;;;596            /* Check the parameters */
;;;597            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;598            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;599            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;600            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;601            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;602    
;;;603            /* Disable the main PLL. */
;;;604            __HAL_RCC_PLL_DISABLE();
;;;605    
;;;606            /* Get Start Tick */
;;;607            tickstart = HAL_GetTick();
;;;608    
;;;609            /* Wait till PLL is ready */
;;;610            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;611            {
;;;612              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;613              {
;;;614                return HAL_TIMEOUT;
;;;615              }
;;;616            }
;;;617    
;;;618            /* Configure the main PLL clock source, multiplication and division factors. */
;;;619            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;620                                 RCC_OscInitStruct->PLL.PLLM,
;;;621                                 RCC_OscInitStruct->PLL.PLLN,
;;;622                                 RCC_OscInitStruct->PLL.PLLP,
;;;623                                 RCC_OscInitStruct->PLL.PLLQ);
;;;624    
;;;625            /* Enable the main PLL. */
;;;626            __HAL_RCC_PLL_ENABLE();
;;;627    
;;;628            /* Get Start Tick */
;;;629            tickstart = HAL_GetTick();
;;;630    
;;;631            /* Wait till PLL is ready */
;;;632            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;633            {
;;;634              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;635              {
;;;636                return HAL_TIMEOUT;
;;;637              }
;;;638            }
;;;639          }
;;;640          else
;;;641          {
;;;642            /* Disable the main PLL. */
;;;643            __HAL_RCC_PLL_DISABLE();
;;;644    
;;;645            /* Get Start Tick */
;;;646            tickstart = HAL_GetTick();
;;;647    
;;;648            /* Wait till PLL is ready */
;;;649            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;650            {
;;;651              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;652              {
;;;653                return HAL_TIMEOUT;
;;;654              }
;;;655            }
;;;656          }
;;;657        }
;;;658        else
;;;659        {
;;;660          /* Check if there is a request to disable the PLL used as System clock source */
;;;661          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
;;;662          {
;;;663            return HAL_ERROR;
;;;664          }
;;;665          else
;;;666          {
;;;667            /* Do not return HAL_ERROR if request repeats the current configuration */
;;;668            uint32_t pllcfgr = RCC->PLLCFGR;
;;;669          
;;;670            if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;671               (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
;;;672               ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
;;;673               (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
;;;674               (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
;;;675            {
;;;676              return HAL_ERROR;
;;;677            }
;;;678          }
;;;679        }
;;;680      }
;;;681      return HAL_OK;
;;;682    }
000008  bdf8              POP      {r3-r7,pc}
                  |L14.10|
00000a  7820              LDRB     r0,[r4,#0]            ;356
00000c  f0000001          AND      r0,r0,#1              ;356
000010  2800              CMP      r0,#0                 ;356
000012  d048              BEQ      |L14.166|
000014  48f7              LDR      r0,|L14.1012|
000016  6800              LDR      r0,[r0,#0]            ;361
000018  f000000c          AND      r0,r0,#0xc            ;361
00001c  2804              CMP      r0,#4                 ;361
00001e  d00d              BEQ      |L14.60|
000020  48f4              LDR      r0,|L14.1012|
000022  6800              LDR      r0,[r0,#0]            ;362
000024  f000000c          AND      r0,r0,#0xc            ;362
000028  2808              CMP      r0,#8                 ;362
00002a  d111              BNE      |L14.80|
00002c  48f1              LDR      r0,|L14.1012|
00002e  1f00              SUBS     r0,r0,#4              ;362
000030  6800              LDR      r0,[r0,#0]            ;362
000032  f4000080          AND      r0,r0,#0x400000       ;362
000036  f5b00f80          CMP      r0,#0x400000          ;362
00003a  d109              BNE      |L14.80|
                  |L14.60|
00003c  48ed              LDR      r0,|L14.1012|
00003e  3808              SUBS     r0,r0,#8              ;364
000040  6800              LDR      r0,[r0,#0]            ;364
000042  f3c04040          UBFX     r0,r0,#17,#1          ;364
000046  b370              CBZ      r0,|L14.166|
000048  6860              LDR      r0,[r4,#4]            ;364
00004a  bb60              CBNZ     r0,|L14.166|
00004c  2001              MOVS     r0,#1                 ;366
00004e  e7db              B        |L14.8|
                  |L14.80|
000050  7920              LDRB     r0,[r4,#4]            ;372
000052  49e8              LDR      r1,|L14.1012|
000054  1f89              SUBS     r1,r1,#6              ;372
000056  7008              STRB     r0,[r1,#0]            ;372
000058  6860              LDR      r0,[r4,#4]            ;375
00005a  b190              CBZ      r0,|L14.130|
00005c  f7fffffe          BL       HAL_GetTick
000060  4605              MOV      r5,r0                 ;378
000062  e006              B        |L14.114|
                  |L14.100|
000064  f7fffffe          BL       HAL_GetTick
000068  1b40              SUBS     r0,r0,r5              ;383
00006a  2864              CMP      r0,#0x64              ;383
00006c  d901              BLS      |L14.114|
00006e  2003              MOVS     r0,#3                 ;385
000070  e7ca              B        |L14.8|
                  |L14.114|
000072  48e0              LDR      r0,|L14.1012|
000074  3808              SUBS     r0,r0,#8              ;381
000076  6800              LDR      r0,[r0,#0]            ;381
000078  f3c04040          UBFX     r0,r0,#17,#1          ;381
00007c  2800              CMP      r0,#0                 ;381
00007e  d0f1              BEQ      |L14.100|
000080  e011              B        |L14.166|
                  |L14.130|
000082  f7fffffe          BL       HAL_GetTick
000086  4605              MOV      r5,r0                 ;392
000088  e006              B        |L14.152|
                  |L14.138|
00008a  f7fffffe          BL       HAL_GetTick
00008e  1b40              SUBS     r0,r0,r5              ;397
000090  2864              CMP      r0,#0x64              ;397
000092  d901              BLS      |L14.152|
000094  2003              MOVS     r0,#3                 ;399
000096  e7b7              B        |L14.8|
                  |L14.152|
000098  48d6              LDR      r0,|L14.1012|
00009a  3808              SUBS     r0,r0,#8              ;395
00009c  6800              LDR      r0,[r0,#0]            ;395
00009e  f3c04040          UBFX     r0,r0,#17,#1          ;395
0000a2  2800              CMP      r0,#0                 ;395
0000a4  d1f1              BNE      |L14.138|
                  |L14.166|
0000a6  7820              LDRB     r0,[r4,#0]            ;406
0000a8  f0000002          AND      r0,r0,#2              ;406
0000ac  2802              CMP      r0,#2                 ;406
0000ae  d169              BNE      |L14.388|
0000b0  48d0              LDR      r0,|L14.1012|
0000b2  6800              LDR      r0,[r0,#0]            ;413
0000b4  f000000c          AND      r0,r0,#0xc            ;413
0000b8  b158              CBZ      r0,|L14.210|
0000ba  48ce              LDR      r0,|L14.1012|
0000bc  6800              LDR      r0,[r0,#0]            ;414
0000be  f000000c          AND      r0,r0,#0xc            ;414
0000c2  2808              CMP      r0,#8                 ;414
0000c4  d121              BNE      |L14.266|
0000c6  48cb              LDR      r0,|L14.1012|
0000c8  1f00              SUBS     r0,r0,#4              ;414
0000ca  6800              LDR      r0,[r0,#0]            ;414
0000cc  f4000080          AND      r0,r0,#0x400000       ;414
0000d0  b9d8              CBNZ     r0,|L14.266|
                  |L14.210|
0000d2  48c8              LDR      r0,|L14.1012|
0000d4  3808              SUBS     r0,r0,#8              ;417
0000d6  6800              LDR      r0,[r0,#0]            ;417
0000d8  f3c00040          UBFX     r0,r0,#1,#1           ;417
0000dc  b120              CBZ      r0,|L14.232|
0000de  68e0              LDR      r0,[r4,#0xc]          ;417
0000e0  2801              CMP      r0,#1                 ;417
0000e2  d001              BEQ      |L14.232|
0000e4  2001              MOVS     r0,#1                 ;419
0000e6  e78f              B        |L14.8|
                  |L14.232|
0000e8  48c2              LDR      r0,|L14.1012|
0000ea  3808              SUBS     r0,r0,#8              ;425
0000ec  6800              LDR      r0,[r0,#0]            ;425
0000ee  f02000f8          BIC      r0,r0,#0xf8           ;425
0000f2  22f8              MOVS     r2,#0xf8              ;425
0000f4  fa92f2a2          RBIT     r2,r2                 ;425
0000f8  fab2f282          CLZ      r2,r2                 ;425
0000fc  6921              LDR      r1,[r4,#0x10]         ;425
0000fe  4091              LSLS     r1,r1,r2              ;425
000100  4308              ORRS     r0,r0,r1              ;425
000102  49bc              LDR      r1,|L14.1012|
000104  3908              SUBS     r1,r1,#8              ;425
000106  6008              STR      r0,[r1,#0]            ;425
000108  e03c              B        |L14.388|
                  |L14.266|
00010a  68e0              LDR      r0,[r4,#0xc]          ;431
00010c  b328              CBZ      r0,|L14.346|
00010e  2001              MOVS     r0,#1                 ;434
000110  49b9              LDR      r1,|L14.1016|
000112  6008              STR      r0,[r1,#0]            ;434
000114  f7fffffe          BL       HAL_GetTick
000118  4605              MOV      r5,r0                 ;437
00011a  e006              B        |L14.298|
                  |L14.284|
00011c  f7fffffe          BL       HAL_GetTick
000120  1b40              SUBS     r0,r0,r5              ;442
000122  2802              CMP      r0,#2                 ;442
000124  d901              BLS      |L14.298|
000126  2003              MOVS     r0,#3                 ;444
000128  e76e              B        |L14.8|
                  |L14.298|
00012a  48b2              LDR      r0,|L14.1012|
00012c  3808              SUBS     r0,r0,#8              ;440
00012e  6800              LDR      r0,[r0,#0]            ;440
000130  f3c00040          UBFX     r0,r0,#1,#1           ;440
000134  2800              CMP      r0,#0                 ;440
000136  d0f1              BEQ      |L14.284|
000138  48ae              LDR      r0,|L14.1012|
00013a  3808              SUBS     r0,r0,#8              ;449
00013c  6800              LDR      r0,[r0,#0]            ;449
00013e  f02000f8          BIC      r0,r0,#0xf8           ;449
000142  22f8              MOVS     r2,#0xf8              ;449
000144  fa92f2a2          RBIT     r2,r2                 ;449
000148  fab2f282          CLZ      r2,r2                 ;449
00014c  6921              LDR      r1,[r4,#0x10]         ;449
00014e  4091              LSLS     r1,r1,r2              ;449
000150  4308              ORRS     r0,r0,r1              ;449
000152  49a8              LDR      r1,|L14.1012|
000154  3908              SUBS     r1,r1,#8              ;449
000156  6008              STR      r0,[r1,#0]            ;449
000158  e014              B        |L14.388|
                  |L14.346|
00015a  2000              MOVS     r0,#0                 ;454
00015c  49a6              LDR      r1,|L14.1016|
00015e  6008              STR      r0,[r1,#0]            ;454
000160  f7fffffe          BL       HAL_GetTick
000164  4605              MOV      r5,r0                 ;457
000166  e006              B        |L14.374|
                  |L14.360|
000168  f7fffffe          BL       HAL_GetTick
00016c  1b40              SUBS     r0,r0,r5              ;462
00016e  2802              CMP      r0,#2                 ;462
000170  d901              BLS      |L14.374|
000172  2003              MOVS     r0,#3                 ;464
000174  e748              B        |L14.8|
                  |L14.374|
000176  489f              LDR      r0,|L14.1012|
000178  3808              SUBS     r0,r0,#8              ;460
00017a  6800              LDR      r0,[r0,#0]            ;460
00017c  f3c00040          UBFX     r0,r0,#1,#1           ;460
000180  2800              CMP      r0,#0                 ;460
000182  d1f1              BNE      |L14.360|
                  |L14.388|
000184  7820              LDRB     r0,[r4,#0]            ;471
000186  f0000008          AND      r0,r0,#8              ;471
00018a  2808              CMP      r0,#8                 ;471
00018c  d12c              BNE      |L14.488|
00018e  6960              LDR      r0,[r4,#0x14]         ;477
000190  b1a8              CBZ      r0,|L14.446|
000192  2001              MOVS     r0,#1                 ;480
000194  4999              LDR      r1,|L14.1020|
000196  6008              STR      r0,[r1,#0]            ;480
000198  f7fffffe          BL       HAL_GetTick
00019c  4605              MOV      r5,r0                 ;483
00019e  e006              B        |L14.430|
                  |L14.416|
0001a0  f7fffffe          BL       HAL_GetTick
0001a4  1b40              SUBS     r0,r0,r5              ;488
0001a6  2802              CMP      r0,#2                 ;488
0001a8  d901              BLS      |L14.430|
0001aa  2003              MOVS     r0,#3                 ;490
0001ac  e72c              B        |L14.8|
                  |L14.430|
0001ae  4891              LDR      r0,|L14.1012|
0001b0  306c              ADDS     r0,r0,#0x6c           ;486
0001b2  6800              LDR      r0,[r0,#0]            ;486
0001b4  f3c00040          UBFX     r0,r0,#1,#1           ;486
0001b8  2800              CMP      r0,#0                 ;486
0001ba  d0f1              BEQ      |L14.416|
0001bc  e014              B        |L14.488|
                  |L14.446|
0001be  2000              MOVS     r0,#0                 ;497
0001c0  498e              LDR      r1,|L14.1020|
0001c2  6008              STR      r0,[r1,#0]            ;497
0001c4  f7fffffe          BL       HAL_GetTick
0001c8  4605              MOV      r5,r0                 ;500
0001ca  e006              B        |L14.474|
                  |L14.460|
0001cc  f7fffffe          BL       HAL_GetTick
0001d0  1b40              SUBS     r0,r0,r5              ;505
0001d2  2802              CMP      r0,#2                 ;505
0001d4  d901              BLS      |L14.474|
0001d6  2003              MOVS     r0,#3                 ;507
0001d8  e716              B        |L14.8|
                  |L14.474|
0001da  4886              LDR      r0,|L14.1012|
0001dc  306c              ADDS     r0,r0,#0x6c           ;503
0001de  6800              LDR      r0,[r0,#0]            ;503
0001e0  f3c00040          UBFX     r0,r0,#1,#1           ;503
0001e4  2800              CMP      r0,#0                 ;503
0001e6  d1f1              BNE      |L14.460|
                  |L14.488|
0001e8  7820              LDRB     r0,[r4,#0]            ;513
0001ea  f0000004          AND      r0,r0,#4              ;513
0001ee  2804              CMP      r0,#4                 ;513
0001f0  d174              BNE      |L14.732|
0001f2  2600              MOVS     r6,#0                 ;515
0001f4  487f              LDR      r0,|L14.1012|
0001f6  3038              ADDS     r0,r0,#0x38           ;522
0001f8  6800              LDR      r0,[r0,#0]            ;522
0001fa  f0005080          AND      r0,r0,#0x10000000     ;522
0001fe  b990              CBNZ     r0,|L14.550|
000200  bf00              NOP                            ;524
000202  2000              MOVS     r0,#0                 ;524
000204  9000              STR      r0,[sp,#0]            ;524
000206  487b              LDR      r0,|L14.1012|
000208  3038              ADDS     r0,r0,#0x38           ;524
00020a  6800              LDR      r0,[r0,#0]            ;524
00020c  f0405080          ORR      r0,r0,#0x10000000     ;524
000210  4978              LDR      r1,|L14.1012|
000212  3138              ADDS     r1,r1,#0x38           ;524
000214  6008              STR      r0,[r1,#0]            ;524
000216  4608              MOV      r0,r1                 ;524
000218  6800              LDR      r0,[r0,#0]            ;524
00021a  f0005080          AND      r0,r0,#0x10000000     ;524
00021e  9000              STR      r0,[sp,#0]            ;524
000220  bf00              NOP                            ;524
000222  bf00              NOP                            ;524
000224  2601              MOVS     r6,#1                 ;525
                  |L14.550|
000226  4876              LDR      r0,|L14.1024|
000228  6800              LDR      r0,[r0,#0]            ;529
00022a  f4407080          ORR      r0,r0,#0x100          ;529
00022e  4974              LDR      r1,|L14.1024|
000230  6008              STR      r0,[r1,#0]            ;529
000232  4608              MOV      r0,r1                 ;531
000234  6800              LDR      r0,[r0,#0]            ;531
000236  f4007080          AND      r0,r0,#0x100          ;531
00023a  b9a8              CBNZ     r0,|L14.616|
00023c  4608              MOV      r0,r1                 ;534
00023e  6800              LDR      r0,[r0,#0]            ;534
000240  f4407080          ORR      r0,r0,#0x100          ;534
000244  6008              STR      r0,[r1,#0]            ;534
000246  f7fffffe          BL       HAL_GetTick
00024a  4605              MOV      r5,r0                 ;537
00024c  e006              B        |L14.604|
                  |L14.590|
00024e  f7fffffe          BL       HAL_GetTick
000252  1b40              SUBS     r0,r0,r5              ;541
000254  2802              CMP      r0,#2                 ;541
000256  d901              BLS      |L14.604|
000258  2003              MOVS     r0,#3                 ;543
00025a  e6d5              B        |L14.8|
                  |L14.604|
00025c  4868              LDR      r0,|L14.1024|
00025e  6800              LDR      r0,[r0,#0]            ;539
000260  f4007080          AND      r0,r0,#0x100          ;539
000264  2800              CMP      r0,#0                 ;539
000266  d0f2              BEQ      |L14.590|
                  |L14.616|
000268  7a20              LDRB     r0,[r4,#8]            ;549
00026a  4962              LDR      r1,|L14.1012|
00026c  3168              ADDS     r1,r1,#0x68           ;549
00026e  7008              STRB     r0,[r1,#0]            ;549
000270  68a0              LDR      r0,[r4,#8]            ;551
000272  b1a0              CBZ      r0,|L14.670|
000274  f7fffffe          BL       HAL_GetTick
000278  4605              MOV      r5,r0                 ;554
00027a  e008              B        |L14.654|
                  |L14.636|
00027c  f7fffffe          BL       HAL_GetTick
000280  1b40              SUBS     r0,r0,r5              ;559
000282  f2413188          MOV      r1,#0x1388            ;559
000286  4288              CMP      r0,r1                 ;559
000288  d901              BLS      |L14.654|
00028a  2003              MOVS     r0,#3                 ;561
00028c  e6bc              B        |L14.8|
                  |L14.654|
00028e  4859              LDR      r0,|L14.1012|
000290  3068              ADDS     r0,r0,#0x68           ;557
000292  6800              LDR      r0,[r0,#0]            ;557
000294  f3c00040          UBFX     r0,r0,#1,#1           ;557
000298  2800              CMP      r0,#0                 ;557
00029a  d0ef              BEQ      |L14.636|
00029c  e013              B        |L14.710|
                  |L14.670|
00029e  f7fffffe          BL       HAL_GetTick
0002a2  4605              MOV      r5,r0                 ;568
0002a4  e008              B        |L14.696|
                  |L14.678|
0002a6  f7fffffe          BL       HAL_GetTick
0002aa  1b40              SUBS     r0,r0,r5              ;573
0002ac  f2413188          MOV      r1,#0x1388            ;573
0002b0  4288              CMP      r0,r1                 ;573
0002b2  d901              BLS      |L14.696|
0002b4  2003              MOVS     r0,#3                 ;575
0002b6  e6a7              B        |L14.8|
                  |L14.696|
0002b8  484e              LDR      r0,|L14.1012|
0002ba  3068              ADDS     r0,r0,#0x68           ;571
0002bc  6800              LDR      r0,[r0,#0]            ;571
0002be  f3c00040          UBFX     r0,r0,#1,#1           ;571
0002c2  2800              CMP      r0,#0                 ;571
0002c4  d1ef              BNE      |L14.678|
                  |L14.710|
0002c6  2e01              CMP      r6,#1                 ;581
0002c8  d107              BNE      |L14.730|
0002ca  484a              LDR      r0,|L14.1012|
0002cc  3038              ADDS     r0,r0,#0x38           ;583
0002ce  6800              LDR      r0,[r0,#0]            ;583
0002d0  f0205080          BIC      r0,r0,#0x10000000     ;583
0002d4  4947              LDR      r1,|L14.1012|
0002d6  3138              ADDS     r1,r1,#0x38           ;583
0002d8  6008              STR      r0,[r1,#0]            ;583
                  |L14.730|
0002da  bf00              NOP                            ;585
                  |L14.732|
0002dc  69a0              LDR      r0,[r4,#0x18]         ;589
0002de  2800              CMP      r0,#0                 ;589
0002e0  d04b              BEQ      |L14.890|
0002e2  4844              LDR      r0,|L14.1012|
0002e4  6800              LDR      r0,[r0,#0]            ;592
0002e6  f000000c          AND      r0,r0,#0xc            ;592
0002ea  2808              CMP      r0,#8                 ;592
0002ec  d05c              BEQ      |L14.936|
0002ee  69a0              LDR      r0,[r4,#0x18]         ;594
0002f0  2802              CMP      r0,#2                 ;594
0002f2  d143              BNE      |L14.892|
0002f4  2000              MOVS     r0,#0                 ;604
0002f6  4940              LDR      r1,|L14.1016|
0002f8  6608              STR      r0,[r1,#0x60]         ;604
0002fa  f7fffffe          BL       HAL_GetTick
0002fe  4605              MOV      r5,r0                 ;607
000300  e006              B        |L14.784|
                  |L14.770|
000302  f7fffffe          BL       HAL_GetTick
000306  1b40              SUBS     r0,r0,r5              ;612
000308  2864              CMP      r0,#0x64              ;612
00030a  d901              BLS      |L14.784|
00030c  2003              MOVS     r0,#3                 ;614
00030e  e67b              B        |L14.8|
                  |L14.784|
000310  4838              LDR      r0,|L14.1012|
000312  3808              SUBS     r0,r0,#8              ;610
000314  6800              LDR      r0,[r0,#0]            ;610
000316  f3c06040          UBFX     r0,r0,#25,#1          ;610
00031a  2800              CMP      r0,#0                 ;610
00031c  d1f1              BNE      |L14.770|
00031e  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;619
000322  4308              ORRS     r0,r0,r1              ;619
000324  6a61              LDR      r1,[r4,#0x24]         ;619
000326  ea401181          ORR      r1,r0,r1,LSL #6       ;619
00032a  202c              MOVS     r0,#0x2c              ;619
00032c  5d00              LDRB     r0,[r0,r4]            ;619
00032e  ea416100          ORR      r1,r1,r0,LSL #24      ;619
000332  2201              MOVS     r2,#1                 ;619
000334  6aa0              LDR      r0,[r4,#0x28]         ;619
000336  ebc20050          RSB      r0,r2,r0,LSR #1       ;619
00033a  ea414000          ORR      r0,r1,r0,LSL #16      ;619
00033e  492d              LDR      r1,|L14.1012|
000340  1f09              SUBS     r1,r1,#4              ;619
000342  6809              LDR      r1,[r1,#0]            ;619
000344  4a2f              LDR      r2,|L14.1028|
000346  4011              ANDS     r1,r1,r2              ;619
000348  4308              ORRS     r0,r0,r1              ;619
00034a  492a              LDR      r1,|L14.1012|
00034c  1f09              SUBS     r1,r1,#4              ;619
00034e  6008              STR      r0,[r1,#0]            ;619
000350  2001              MOVS     r0,#1                 ;626
000352  4929              LDR      r1,|L14.1016|
000354  6608              STR      r0,[r1,#0x60]         ;626
000356  f7fffffe          BL       HAL_GetTick
00035a  4605              MOV      r5,r0                 ;629
00035c  e006              B        |L14.876|
                  |L14.862|
00035e  f7fffffe          BL       HAL_GetTick
000362  1b40              SUBS     r0,r0,r5              ;634
000364  2864              CMP      r0,#0x64              ;634
000366  d901              BLS      |L14.876|
000368  2003              MOVS     r0,#3                 ;636
00036a  e64d              B        |L14.8|
                  |L14.876|
00036c  4821              LDR      r0,|L14.1012|
00036e  3808              SUBS     r0,r0,#8              ;632
000370  6800              LDR      r0,[r0,#0]            ;632
000372  f3c06040          UBFX     r0,r0,#25,#1          ;632
000376  2800              CMP      r0,#0                 ;632
000378  d0f1              BEQ      |L14.862|
                  |L14.890|
00037a  e038              B        |L14.1006|
                  |L14.892|
00037c  2000              MOVS     r0,#0                 ;643
00037e  491e              LDR      r1,|L14.1016|
000380  6608              STR      r0,[r1,#0x60]         ;643
000382  f7fffffe          BL       HAL_GetTick
000386  4605              MOV      r5,r0                 ;646
000388  e006              B        |L14.920|
                  |L14.906|
00038a  f7fffffe          BL       HAL_GetTick
00038e  1b40              SUBS     r0,r0,r5              ;651
000390  2864              CMP      r0,#0x64              ;651
000392  d901              BLS      |L14.920|
000394  2003              MOVS     r0,#3                 ;653
000396  e637              B        |L14.8|
                  |L14.920|
000398  4816              LDR      r0,|L14.1012|
00039a  3808              SUBS     r0,r0,#8              ;649
00039c  6800              LDR      r0,[r0,#0]            ;649
00039e  f3c06040          UBFX     r0,r0,#25,#1          ;649
0003a2  2800              CMP      r0,#0                 ;649
0003a4  d1f1              BNE      |L14.906|
0003a6  e022              B        |L14.1006|
                  |L14.936|
0003a8  69a0              LDR      r0,[r4,#0x18]         ;661
0003aa  2801              CMP      r0,#1                 ;661
0003ac  d100              BNE      |L14.944|
0003ae  e62b              B        |L14.8|
                  |L14.944|
0003b0  4810              LDR      r0,|L14.1012|
0003b2  1f00              SUBS     r0,r0,#4              ;668
0003b4  6801              LDR      r1,[r0,#0]            ;668
0003b6  f4010280          AND      r2,r1,#0x400000       ;670
0003ba  69e0              LDR      r0,[r4,#0x1c]         ;670
0003bc  4282              CMP      r2,r0                 ;670
0003be  d113              BNE      |L14.1000|
0003c0  f001023f          AND      r2,r1,#0x3f           ;671
0003c4  6a20              LDR      r0,[r4,#0x20]         ;671
0003c6  4282              CMP      r2,r0                 ;671
0003c8  d10e              BNE      |L14.1000|
0003ca  f3c11288          UBFX     r2,r1,#6,#9           ;672
0003ce  6a60              LDR      r0,[r4,#0x24]         ;672
0003d0  4290              CMP      r0,r2                 ;672
0003d2  d109              BNE      |L14.1000|
0003d4  f4013240          AND      r2,r1,#0x30000        ;673
0003d8  6aa0              LDR      r0,[r4,#0x28]         ;673
0003da  4282              CMP      r2,r0                 ;673
0003dc  d104              BNE      |L14.1000|
0003de  f0016270          AND      r2,r1,#0xf000000      ;674
0003e2  6ae0              LDR      r0,[r4,#0x2c]         ;674
0003e4  4282              CMP      r2,r0                 ;674
0003e6  d001              BEQ      |L14.1004|
                  |L14.1000|
0003e8  2001              MOVS     r0,#1                 ;676
0003ea  e60d              B        |L14.8|
                  |L14.1004|
0003ec  bf00              NOP                            ;678
                  |L14.1006|
0003ee  2000              MOVS     r0,#0                 ;681
0003f0  e60a              B        |L14.8|
0003f2  0000              DCW      0x0000
                  |L14.1012|
                          DCD      0x40023808
                  |L14.1016|
                          DCD      0x42470000
                  |L14.1020|
                          DCD      0x42470e80
                  |L14.1024|
                          DCD      0x40007000
                  |L14.1028|
                          DCD      0xf0bc8000
                          ENDP


;*** Start embedded assembler ***

#line 1 "stm32f2xx_hal\\Src\\stm32f2xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____REV16|
#line 467 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.5.1\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____REVSH|
#line 482
|__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____RRX|
#line 669
|__asm___19_stm32f2xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
